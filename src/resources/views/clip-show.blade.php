<x-app-layout>
    <h2 class="text-xl mb-4">{{ $clip->slug }}</h2>

    {{-- ===== –≤—ñ–¥–µ–æ + —Ä–µ–¥–∞–∫—Ç–æ—Ä SRT ================================================= --}}
    <div class="row gx-4 gy-4">
        <div class="col-12 col-md-7">
            <video class="w-100 border rounded" controls>
                <source src="{{ Storage::url($clip->video_path) }}" type="video/mp4">
            </video>
        </div>

        <div class="col-12 col-md-5 d-flex flex-column">
            <h3 class="h5 mb-2">–°—É–±—Ç–∏—Ç—Ä–∏ (SRT)</h3>
            <div x-data="editor('{{ route('clips.srt', $clip) }}', @js($subs))" class="d-flex flex-column">
            <textarea x-model="text" @input="scheduleSave"
                      class="form-control flex-grow-1 mb-2" style="min-height:300px">{{$subs}}</textarea>
                <small x-show="saving" class="text-muted">–ó–±–µ—Ä—ñ–≥–∞—é‚Ä¶</small>
                <small x-show="saved"  class="text-success">‚úì –∑–±–µ—Ä–µ–∂–µ–Ω–æ</small>
            </div>
        </div>
    </div>

    {{-- ===== –∫–Ω–æ–ø–∫–∞ Generate / Generating / Download ================================= --}}
    @php
        $generateUrl = route('clips.hardsubs', $clip);
        $downloadUrl = route('clips.download',  $clip);
        $statusUrl   = route('api.clips.status', $clip);
    @endphp

        <div x-data="hardSub({{ $clip->id }},
                     '{{ $generateUrl }}',
                     '{{ $downloadUrl }}',
                     '{{ $statusUrl }}',
                     '{{ $clip->status->value }}',   {{-- ‚Üê .value --}}
                     '{{ csrf_token() }}')"
             x-init="init()"
             class="mt-4">


        {{-- queued  --}}
            {{-- queued –∞–±–æ ready --}}
            <template x-if="status==='{{ \App\Enums\ClipStatus::QUEUED->value }}'
             || status==='{{ \App\Enums\ClipStatus::READY->value }}'">
                <button @click="generate" class="btn btn-primary">
                    üéûÔ∏è Generate video Hard‚Äësub
                </button>
            </template>

            {{-- processing --}}
            <template x-if="status==='{{ \App\Enums\ClipStatus::HARD_PROCESSING->value }}'">
                <button class="btn btn-secondary" disabled>‚è≥ Generating‚Ä¶</button>
            </template>

            {{-- done --}}
            <template x-if="status==='{{ \App\Enums\ClipStatus::HARD_DONE->value }}'">
                <a :href="downloadUrl" class="btn btn-success" download>
                    üì• Download MP4 with Hard‚Äësub
                </a>
            </template>

        </div>

    {{-- ======================= JS =================================================== --}}
    <script>

        const STATUS = {
            QUEUED: '{{ App\Enums\ClipStatus::QUEUED->value }}',
            READY:  '{{ App\Enums\ClipStatus::READY->value }}',
            PROC:   '{{ App\Enums\ClipStatus::HARD_PROCESSING->value }}',
            DONE:   '{{ App\Enums\ClipStatus::HARD_DONE->value }}',
        };

        /* —Ä–µ–¥–∞–∫—Ç–æ—Ä SRT (–≤–∞—à –∫–æ–¥) */
        /* ===== —Ä–µ–¥–∞–∫—Ç–æ—Ä SRT ===== */
        function editor(url, initialText) {
            return {
                // ‚ñ∫ —Å—Ç–∞–Ω textarea
                text:   initialText, // ‚Üê –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –≤–º—ñ—Å—Ç SRT, —è–∫–∏–π Blade –ø–µ—Ä–µ–¥–∞–≤ —è–∫@js($subs)
                saving: false,       // true ‚Äì–∫–æ–ª–∏ –π–¥–µ HTTP PUT
                saved:  false,       // true ‚Äì–∫–æ–ª–∏ PUT –∑–∞–≤–µ—Ä—à–∏–≤—Å—è
                timer:  null,        // id —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è debounce

                // ‚ñ∫ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –Ω–∞ –∫–æ–∂–µ–Ω input —É <textarea>
                scheduleSave() {
                    clearTimeout(this.timer);               // üëâ —Å–∫–∏–¥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π
                    this.timer = setTimeout(() => this.save(), 1000); // üëâ —á–µ–∫–∞—î–º–æ 1—Å
                },

                // ‚ñ∫ –Ω–∞–¥—Å–∏–ª–∞—î PUT/clips/{id}/srt
                async save() {
                    this.saving = true;   // –ø–æ–∫–∞–∑—É—î ¬´–ó–±–µ—Ä—ñ–≥–∞—é‚Ä¶¬ª
                    this.saved  = false;

                    await fetch(url, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRF-TOKEN': '{{ csrf_token() }}' // Blade –≤—Å—Ç–∞–≤–∏–≤ —Ç–æ–∫–µ–Ω
                        },
                        body: JSON.stringify({ srt: this.text })
                    });

                    this.saving = false;
                    this.saved  = true;   // –ø–æ–∫–∞–∑—É—î ¬´‚úì –∑–±–µ—Ä–µ–∂–µ–Ω–æ¬ª

                    window.dispatchEvent(new CustomEvent('srt-updated'));

                    setTimeout(() => this.saved = false, 1500); // —á–µ—Ä–µ–∑ 1.5—Å —Ö–æ–≤–∞—î
                }
            }
        }

        /* ===== –∫–µ—Ä—É–≤–∞–Ω–Ω—è Hard‚Äësub ===== */
        function hardSub(id, generateUrl, downloadUrl, statusUrl, initialStatus, csrf) {
            return {
                // ‚ñ∫ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å –∫–ª—ñ–ø—É: queued | hard_processing | hard_done
                status:      initialStatus,
                // ‚ñ∫ URL –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (–ø–æ–∫–∏ null, –∑–∞–ø–æ–≤–Ω–∏—Ç—å—Å—è, –∫–æ–ª–∏ hard_done)
                downloadUrl: downloadUrl,
                poller:      null,        // id setInterval

                /* –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –≤—ñ–¥—Ä–∞–∑—É, –∫–æ–ª–∏ Alpine —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –∫–æ–º–ø–æ–Ω–µ–Ω—Ç */
                init() {
                    /* —Ä–µ–∞–≥—É—î–º–æ –Ω–∞ –∑–º—ñ–Ω—É SRT */
                    window.addEventListener('srt-updated', () => {
                        this.status      = STATUS.READY;
                        this.downloadUrl = null;      // —Ö–æ–≤–∞—î–º–æ —Å—Ç–∞—Ä–∏–π –ª—ñ–Ω–∫
                    });

                    if (this.status === STATUS.PROC)
                        this.startPolling();
                },

                /* –∫–Ω–æ–ø–∫–∞ "Generate" –≤–∏–∫–ª–∏–∫–∞—î —Ü–µ–π –º–µ—Ç–æ–¥ */
                async generate() {
                    // 1. –æ–¥—Ä–∞–∑—É –ø–µ—Ä–µ–º–∏–∫–Ω–µ–º–æ UI –Ω–∞ ¬´Generating‚Ä¶¬ª
                    this.status = STATUS.PROC;
                    this.startPolling();

                    // 2. –≤—ñ–¥–ø—Ä–∞–≤–∏–º–æ POST/clips/{id}/hardsubs (CSRF –≤ headers)
                    await fetch(generateUrl, {
                        method:  'POST',
                        headers: { 'X-CSRF-TOKEN': csrf }
                    });
                    // –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —á–µ–∫–∞—Ç–∏ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ ‚Äî —Å—Ç–∞—Ç—É—Å –ø–∏—à–µ–º–æ —É –ë–î —É—Å–µ—Ä–µ–¥–∏–Ω—ñ Job
                },

                /* –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è /api/clips/{id}/status –∫–æ–∂–Ω—ñ 5—Å */
                startPolling() {
                    if (this.poller) return;
                    this.poller = setInterval(async () => {
                        const res = await fetch(statusUrl).then(r => r.json());
                        this.status      = res.status;
                        this.downloadUrl = res.url;

                        if (this.status === STATUS.DONE) clearInterval(this.poller);
                    }, 5000);
                }
            }
        }

    </script>
</x-app-layout>
